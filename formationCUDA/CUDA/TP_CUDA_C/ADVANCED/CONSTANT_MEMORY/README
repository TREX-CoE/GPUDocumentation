

Complete .cu



--------------------------------------------
Basic Management
--------------------------------------------

cudaError_t cudaMalloc( void ** devPtr, size_t  size )

  Parameters:
  devPtr        - Pointer to allocated device memory
  size          - Requested allocation size in bytes



cudaError_t cudaMemcpy( void *dst, const void *src, size_t count, enum cudaMemcpyKind kind )

  Parameters:
  dst   - Destination memory address
  src   - Source memory address
  count - Size in bytes to copy
  kind  - Type of transfer: cudaMemcpyHostToHost, cudaMemcpyHostToDevice, cudaMemcpyDeviceToHost, or cudaMemcpyDeviceToDevice



cudaError_t cudaFree( void *devPtr )

  Parameters:
  devPtr        - Device pointer to memory to free



__global__   declares kernel, which is called on host and executed on device
__device__   declares device function, which is called and executed on device
__host__     declares host function, which is called and executed on host


dim3 : integer vector type
  dim3 value( nx, ny, nz );
  dim3 value;
  value.x = nx;
  value.y = ny;
  value.z = nz;


kernelName<<< blocksInGrid, threadsPerBlock >>>(args, ... );


Pre-defined variables
 gridDim        dimensions of grid
 blockDim       dimensions of block
 blockIdx       block index within grid
 threadIdx      thread index within block



Declaring variables
__device__  	declares device variable in global memory, accessible from all threads, with lifetime of application
__constant__	declares device variable in constant memory, accessible from all threads, with lifetime of application
__shared__  	declares device varibale in block's shared memory, accessible from all threads within a block, with lifetime of block



cudaError_t cudaMemcpyFromSymbol ( void* dst, const void* symbol, size_t count, size_t offset = 0, cudaMemcpyKind kind = cudaMemcpyDeviceToHost )
  Copies data from the given symbol on the device.
  
  Parameters
  dst    - Destination memory address
  symbol - Device symbol address
  count  - Size in bytes to copy
  offset - Offset from start of symbol in bytes
  kind   - Type of transfer




cudaError_t cudaMemcpyToSymbol ( const void* symbol, const void* src, size_t count, size_t offset = 0, cudaMemcpyKind kind = cudaMemcpyHostToDevice )
  Copies data to the given symbol on the device.
  
  Parameters
  symbol - Device symbol address
  src    - Source memory address
  count  - Size in bytes to copy
  offset - Offset from start of symbol in bytes
  kind   - Type of transfer






