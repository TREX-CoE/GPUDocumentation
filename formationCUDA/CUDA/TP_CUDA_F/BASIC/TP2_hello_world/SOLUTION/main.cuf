! vim: ft=fortran :
! compile with pgfortran main.cuf

module kernel_mod
contains
attributes(global) subroutine  mykernel()
  !! use iso_fortran_env, only : stdout => output_unit
  implicit none
  !!write(stdout, '(a)') 'hello world!'
  print*, 'hello world!'
end subroutine mykernel
end module kernel_mod

program main
  use cudafor
  use kernel_mod
  implicit none
  integer istat
  type(dim3) :: blocksize, gridsize
  type(dim3) :: blocksize2, gridsize2


  !!define a grid of 1 blocks and a block size of 4 threads (all on the x dimension)
  blocksize = dim3(4,1,1);
  gridsize  = dim3(1,1,1);

  write(*, '(a,3i3,a,3i3,a)') 'Grid: (',gridsize%x, gridsize%y, gridsize%z &
                 , ') blocks. Block: (',blocksize%x, blocksize%y, blocksize%z &
                 , ') threads'
  
  !!launch kernel execution
  call mykernel<<<gridsize, blocksize>>>()
  istat = cudaDeviceSynchronize()





  !!define a grid of 2 blocks and a block size of 4 threads (all on the x dimension)
  blocksize2 = dim3(4,1,1);
  gridsize2  = dim3(2,1,1);

  write(*, '(a,3i3,a,3i3,a)') 'Grid: (',gridsize2%x, gridsize2%y, gridsize2%z &
                 , ') blocks. Block: (',blocksize2%x, blocksize2%y, blocksize2%z &
                 , ') threads'
  
  !!launch kernel execution
  call mykernel<<<gridsize2, blocksize2>>>()
  istat = cudaDeviceSynchronize()

end program main
